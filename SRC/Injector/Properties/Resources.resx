<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALREADY_REGISTERED" xml:space="preserve">
    <value>"{0}" is already registered.</value>
  </data>
  <data name="PARAMETER_IS_GENERIC" xml:space="preserve">
    <value>Parameter should not be generic.</value>
  </data>
  <data name="CANT_PROXY" xml:space="preserve">
    <value>Creating proxy is not allowed here.</value>
  </data>
  <data name="CIRCULAR_REFERENCE" xml:space="preserve">
    <value>Circular reference: {0}.</value>
  </data>
  <data name="CONSTRUCTOR_NOT_FOUND" xml:space="preserve">
    <value>Public constructor with the given layout can not be found.</value>
  </data>
  <data name="CONSTRUCTOR_OVERLOADING_NOT_SUPPORTED" xml:space="preserve">
    <value>"{0}" must have exactly one (annotated) public constructor.</value>
  </data>
  <data name="INVALID_CONSTRUCTOR" xml:space="preserve">
    <value>All constructor arguments must be an interface/Lazy&lt;interface&gt;.</value>
  </data>
  <data name="INVALID_CONSTRUCTOR_ARGUMENT" xml:space="preserve">
    <value>Non interface/Lazy&lt;interface&gt; arguments must be specified as an explicit argument.</value>
  </data>
  <data name="INVALID_INJECTOR_ENTRY" xml:space="preserve">
    <value>Injector must not contain abstract service entries.</value>
  </data>
  <data name="INVALID_INSTANCE" xml:space="preserve">
    <value>The service instance must implement the interface: "{0}".</value>
  </data>
  <data name="PARAMETER_NOT_AN_INTERFACE" xml:space="preserve">
    <value>Parameter must be an interface.</value>
  </data>
  <data name="PARAMETER_NOT_A_CLASS" xml:space="preserve">
    <value>Parameter must be a class.</value>
  </data>
  <data name="NOT_PRODUCIBLE" xml:space="preserve">
    <value>The service has no factory function.</value>
  </data>
  <data name="SERVICE_NOT_FOUND" xml:space="preserve">
    <value>No registered implementation for "{0}".</value>
  </data>
  <data name="UNKNOWN_LIFETIME" xml:space="preserve">
    <value>Unknown lifetime: {0}.</value>
  </data>
  <data name="INJECTOR_SHOULD_BE_RELEASED" xml:space="preserve">
    <value>The injector can not hold more than {0} transient services. It usually indicates that you were recycling the injector.</value>
  </data>
  <data name="STRICT_DI" xml:space="preserve">
    <value>Attempt to request a dependency that should live shorter than the requestor should.</value>
  </data>
  <data name="NOT_EQUAL" xml:space="preserve">
    <value>The given values are not equal.</value>
  </data>
  <data name="NOT_NULL" xml:space="preserve">
    <value>The value of "{0}" should be null.</value>
  </data>
  <data name="IS_NULL" xml:space="preserve">
    <value>The value of "{0}" can not be null.</value>
  </data>
  <data name="INAPPROPRIATE_OWNERSHIP" xml:space="preserve">
    <value>Inappropriate ownership.</value>
  </data>
  <data name="NOT_BELONGING_REFERENCE" xml:space="preserve">
    <value>The servicereference belongs to an another entry.</value>
  </data>
  <data name="PARAMETER_IS_ABSTRACT" xml:space="preserve">
    <value>Parameter should not be abstract.</value>
  </data>
  <data name="ENTRY_CANNOT_BE_SPECIALIZED" xml:space="preserve">
    <value>Entry can not be specialized.</value>
  </data>
</root>