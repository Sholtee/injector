abstract Solti.Utils.DI.Interfaces.AspectAttribute.UnderlyingInterceptor.get -> System.Type!
abstract Solti.Utils.DI.Interfaces.LifetimeBase.CompareTo(Solti.Utils.DI.Interfaces.LifetimeBase! other) -> int
const Solti.Utils.DI.Interfaces.Consts.INTERNAL_SERVICE_NAME_PREFIX = "$" -> string!
override Solti.Utils.DI.Interfaces.AbstractServiceEntry.ToString() -> string!
Solti.Utils.DI.Interfaces.AbstractServiceEntry
Solti.Utils.DI.Interfaces.AbstractServiceEntry.AbstractServiceEntry(System.Type! interface, string? name, System.Type? implementation, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate!>? factory) -> void
Solti.Utils.DI.Interfaces.AbstractServiceEntry.CreateInstance.get -> Solti.Utils.DI.Interfaces.CreateServiceDelegate?
Solti.Utils.DI.Interfaces.AbstractServiceEntry.CreateInstance.set -> void
Solti.Utils.DI.Interfaces.AbstractServiceEntry.Factory.get -> System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate!>?
Solti.Utils.DI.Interfaces.AbstractServiceEntry.Implementation.get -> System.Type?
Solti.Utils.DI.Interfaces.AbstractServiceEntry.Interface.get -> System.Type!
Solti.Utils.DI.Interfaces.AbstractServiceEntry.Name.get -> string?
Solti.Utils.DI.Interfaces.AbstractServiceEntry.ResolveInstance.get -> Solti.Utils.DI.Interfaces.ResolveServiceDelegate?
Solti.Utils.DI.Interfaces.AbstractServiceEntry.ResolveInstance.set -> void
Solti.Utils.DI.Interfaces.AbstractServiceEntry.State.get -> Solti.Utils.DI.Interfaces.ServiceEntryStates
Solti.Utils.DI.Interfaces.AbstractServiceEntry.State.set -> void
Solti.Utils.DI.Interfaces.AbstractServiceEntry.ToString(bool shortForm) -> string!
Solti.Utils.DI.Interfaces.AspectAttribute
Solti.Utils.DI.Interfaces.AspectAttribute.AspectAttribute() -> void
Solti.Utils.DI.Interfaces.CircularReferenceException
Solti.Utils.DI.Interfaces.CircularReferenceException.Circle.get -> System.Collections.Generic.IReadOnlyList<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>?
Solti.Utils.DI.Interfaces.CircularReferenceException.Circle.init -> void
Solti.Utils.DI.Interfaces.CircularReferenceException.CircularReferenceException() -> void
Solti.Utils.DI.Interfaces.CircularReferenceException.CircularReferenceException(string! message) -> void
Solti.Utils.DI.Interfaces.CircularReferenceException.CircularReferenceException(string! message, System.Exception! innerException) -> void
Solti.Utils.DI.Interfaces.Consts
Solti.Utils.DI.Interfaces.CreateServiceDelegate
Solti.Utils.DI.Interfaces.DecoratorDelegate
Solti.Utils.DI.Interfaces.FactoryDelegate
Solti.Utils.DI.Interfaces.FactoryDelegate<TInterface>
Solti.Utils.DI.Interfaces.IAspect
Solti.Utils.DI.Interfaces.IAspect.UnderlyingInterceptor.get -> System.Type!
Solti.Utils.DI.Interfaces.IBuildContext
Solti.Utils.DI.Interfaces.IBuildContext.AssignSlot() -> int
Solti.Utils.DI.Interfaces.IBuildContext.Compiler.get -> Solti.Utils.DI.Interfaces.IDelegateCompiler!
Solti.Utils.DI.Interfaces.IDelegateCompiler
Solti.Utils.DI.Interfaces.IDelegateCompiler.Compile<TDelegate>(System.Linq.Expressions.Expression<TDelegate!>! expression, System.Action<TDelegate!>! completionCallback) -> void
Solti.Utils.DI.Interfaces.IFactoryVisitor
Solti.Utils.DI.Interfaces.IFactoryVisitor.Visit(System.Linq.Expressions.LambdaExpression! factory, Solti.Utils.DI.Interfaces.AbstractServiceEntry! entry) -> System.Linq.Expressions.LambdaExpression!
Solti.Utils.DI.Interfaces.IHasTag
Solti.Utils.DI.Interfaces.IHasTag.Tag.get -> object?
Solti.Utils.DI.Interfaces.IInjector
Solti.Utils.DI.Interfaces.IInjector.Get(System.Type! iface, string? name = null) -> object!
Solti.Utils.DI.Interfaces.IInjector.Options.get -> Solti.Utils.DI.Interfaces.ScopeOptions!
Solti.Utils.DI.Interfaces.IInjector.TryGet(System.Type! iface, string? name = null) -> object?
Solti.Utils.DI.Interfaces.IInjectorBasicExtensions
Solti.Utils.DI.Interfaces.IInstanceFactory
Solti.Utils.DI.Interfaces.IInstanceFactory.GetOrCreateInstance(Solti.Utils.DI.Interfaces.AbstractServiceEntry! requested, int? slot) -> object!
Solti.Utils.DI.Interfaces.IInstanceFactory.Super.get -> Solti.Utils.DI.Interfaces.IInstanceFactory?
Solti.Utils.DI.Interfaces.IInterfaceInterceptor
Solti.Utils.DI.Interfaces.IInterfaceInterceptor.Invoke(Solti.Utils.DI.Interfaces.IInvocationContext! context, Solti.Utils.DI.Interfaces.InvokeInterceptorDelegate! callNext) -> object?
Solti.Utils.DI.Interfaces.IInvocationContext
Solti.Utils.DI.Interfaces.IInvocationContext.Args.get -> object?[]!
Solti.Utils.DI.Interfaces.IInvocationContext.InterfaceMember.get -> System.Reflection.MemberInfo!
Solti.Utils.DI.Interfaces.IInvocationContext.InterfaceMethod.get -> System.Reflection.MethodInfo!
Solti.Utils.DI.Interfaces.IInvocationContext.ProxyInstance.get -> object!
Solti.Utils.DI.Interfaces.IInvocationContext.TargeteMethod.get -> System.Reflection.MethodInfo!
Solti.Utils.DI.Interfaces.IInvocationContext.TargetMember.get -> System.Reflection.MemberInfo!
Solti.Utils.DI.Interfaces.IModifiedServiceCollection
Solti.Utils.DI.Interfaces.IModifiedServiceCollection.LastEntry.get -> Solti.Utils.DI.Interfaces.AbstractServiceEntry!
Solti.Utils.DI.Interfaces.InjectAttribute
Solti.Utils.DI.Interfaces.InjectAttribute.InjectAttribute() -> void
Solti.Utils.DI.Interfaces.InvokeInterceptorDelegate
Solti.Utils.DI.Interfaces.IProxyEngine
Solti.Utils.DI.Interfaces.IProxyEngine.CreateActivatorExpression(System.Type! proxy, System.Linq.Expressions.Expression! injector, System.Linq.Expressions.Expression! target, System.Linq.Expressions.Expression! interceptorArray) -> System.Linq.Expressions.Expression!
Solti.Utils.DI.Interfaces.IProxyEngine.CreateProxy(System.Type! iface, System.Type! target) -> System.Type!
Solti.Utils.DI.Interfaces.IScopeFactory
Solti.Utils.DI.Interfaces.IScopeFactory.CreateScope(object? tag = null) -> Solti.Utils.DI.Interfaces.IInjector!
Solti.Utils.DI.Interfaces.IScopeFactory.Options.get -> Solti.Utils.DI.Interfaces.ScopeOptions!
Solti.Utils.DI.Interfaces.IScopeFactoryExtensions
Solti.Utils.DI.Interfaces.IServiceCollection
Solti.Utils.DI.Interfaces.IServiceCollection.ServiceOptions.get -> Solti.Utils.DI.Interfaces.ServiceOptions!
Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions
Solti.Utils.DI.Interfaces.IServiceId
Solti.Utils.DI.Interfaces.IServiceId.Interface.get -> System.Type!
Solti.Utils.DI.Interfaces.IServiceId.Name.get -> string?
Solti.Utils.DI.Interfaces.IServiceProviderBasicExtensions
Solti.Utils.DI.Interfaces.LifetimeBase
Solti.Utils.DI.Interfaces.LifetimeBase.LifetimeBase() -> void
Solti.Utils.DI.Interfaces.MissingServiceEntry
Solti.Utils.DI.Interfaces.MissingServiceEntry.MissingServiceEntry(System.Type! interface, string? name) -> void
Solti.Utils.DI.Interfaces.OptionsAttribute
Solti.Utils.DI.Interfaces.OptionsAttribute.Name.get -> string?
Solti.Utils.DI.Interfaces.OptionsAttribute.Name.init -> void
Solti.Utils.DI.Interfaces.OptionsAttribute.Optional.get -> bool
Solti.Utils.DI.Interfaces.OptionsAttribute.Optional.init -> void
Solti.Utils.DI.Interfaces.OptionsAttribute.OptionsAttribute() -> void
Solti.Utils.DI.Interfaces.RequestNotAllowedException
Solti.Utils.DI.Interfaces.RequestNotAllowedException.RequestNotAllowedException() -> void
Solti.Utils.DI.Interfaces.RequestNotAllowedException.RequestNotAllowedException(string! message) -> void
Solti.Utils.DI.Interfaces.RequestNotAllowedException.RequestNotAllowedException(string! message, System.Exception! innerException) -> void
Solti.Utils.DI.Interfaces.ResolveServiceDelegate
Solti.Utils.DI.Interfaces.ScopeOptions
Solti.Utils.DI.Interfaces.ScopeOptions.ServiceResolutionMode.get -> Solti.Utils.DI.Interfaces.ServiceResolutionMode
Solti.Utils.DI.Interfaces.ScopeOptions.ServiceResolutionMode.init -> void
Solti.Utils.DI.Interfaces.ScopeOptions.StrictDI.get -> bool
Solti.Utils.DI.Interfaces.ScopeOptions.StrictDI.init -> void
Solti.Utils.DI.Interfaces.ScopeOptions.SupportsServiceProvider.get -> bool
Solti.Utils.DI.Interfaces.ScopeOptions.SupportsServiceProvider.init -> void
Solti.Utils.DI.Interfaces.ServiceActivatorAttribute
Solti.Utils.DI.Interfaces.ServiceActivatorAttribute.ServiceActivatorAttribute() -> void
Solti.Utils.DI.Interfaces.ServiceAlreadyRegisteredException
Solti.Utils.DI.Interfaces.ServiceAlreadyRegisteredException.ServiceAlreadyRegisteredException() -> void
Solti.Utils.DI.Interfaces.ServiceAlreadyRegisteredException.ServiceAlreadyRegisteredException(string! message) -> void
Solti.Utils.DI.Interfaces.ServiceAlreadyRegisteredException.ServiceAlreadyRegisteredException(string! message, System.Exception! innerException) -> void
Solti.Utils.DI.Interfaces.ServiceEntryExtensions
Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryFeatures.CreateSingleInstance = 1 -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryFeatures.Default = 0 -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryFeatures.Shared = 2 -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryFeatures.SupportsAspects = 8 -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryFeatures.SupportsBuild = 4 -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
Solti.Utils.DI.Interfaces.ServiceEntryStates
Solti.Utils.DI.Interfaces.ServiceEntryStates.Built = 1 -> Solti.Utils.DI.Interfaces.ServiceEntryStates
Solti.Utils.DI.Interfaces.ServiceEntryStates.Default = 0 -> Solti.Utils.DI.Interfaces.ServiceEntryStates
Solti.Utils.DI.Interfaces.ServiceEntryStates.Validated = 2 -> Solti.Utils.DI.Interfaces.ServiceEntryStates
Solti.Utils.DI.Interfaces.ServiceNotFoundException
Solti.Utils.DI.Interfaces.ServiceNotFoundException.ServiceNotFoundException() -> void
Solti.Utils.DI.Interfaces.ServiceNotFoundException.ServiceNotFoundException(string! message) -> void
Solti.Utils.DI.Interfaces.ServiceNotFoundException.ServiceNotFoundException(string! message, System.Exception! innerException) -> void
Solti.Utils.DI.Interfaces.ServiceOptions
Solti.Utils.DI.Interfaces.ServiceOptions.ProxyEngine.get -> Solti.Utils.DI.Interfaces.IProxyEngine?
Solti.Utils.DI.Interfaces.ServiceOptions.ProxyEngine.init -> void
Solti.Utils.DI.Interfaces.ServiceOptions.SupportAspects.get -> bool
Solti.Utils.DI.Interfaces.ServiceOptions.SupportAspects.init -> void
Solti.Utils.DI.Interfaces.ServiceResolutionMode
Solti.Utils.DI.Interfaces.ServiceResolutionMode.AOT = 1 -> Solti.Utils.DI.Interfaces.ServiceResolutionMode
Solti.Utils.DI.Interfaces.ServiceResolutionMode.JIT = 0 -> Solti.Utils.DI.Interfaces.ServiceResolutionMode
Solti.Utils.Primitives.Patterns.IResettable (forwarded, contained in Solti.Utils.Primitives)
Solti.Utils.Primitives.Patterns.IResettable.Dirty.get -> bool (forwarded, contained in Solti.Utils.Primitives)
Solti.Utils.Primitives.Patterns.IResettable.Reset() -> void (forwarded, contained in Solti.Utils.Primitives)
static Solti.Utils.DI.Interfaces.IInjectorBasicExtensions.Get<TInterface>(this Solti.Utils.DI.Interfaces.IInjector! self, string? name = null) -> TInterface!
static Solti.Utils.DI.Interfaces.IInjectorBasicExtensions.TryGet<TInterface>(this Solti.Utils.DI.Interfaces.IInjector! self, string? name = null) -> TInterface?
static Solti.Utils.DI.Interfaces.IScopeFactoryExtensions.CreateScope(this Solti.Utils.DI.Interfaces.IScopeFactory! self, out System.IServiceProvider! provider) -> Solti.Utils.Primitives.Patterns.IDisposableEx!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Decorate(this Solti.Utils.DI.Interfaces.IModifiedServiceCollection! self, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.DecoratorDelegate!>! decorator) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Factory(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate!>! factory, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Factory(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate!>! factory, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Factory<TInterface>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, string? name, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate<TInterface!>!>! factory, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Factory<TInterface>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate<TInterface!>!>! factory, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name, System.Type! provider, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name, System.Type! provider, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, System.Type! provider, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, System.Type! provider, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider<TInterface, TProvider>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider<TInterface, TProvider>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Provider<TInterface, TProvider>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, string? name, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Register(this Solti.Utils.DI.Interfaces.IServiceCollection! self, params Solti.Utils.DI.Interfaces.AbstractServiceEntry![]! entries) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Register(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Collections.Generic.IEnumerable<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>! entries) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Remove(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface) -> Solti.Utils.DI.Interfaces.IServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Remove(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name) -> Solti.Utils.DI.Interfaces.IServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Remove<TInterface>(this Solti.Utils.DI.Interfaces.IServiceCollection! self) -> Solti.Utils.DI.Interfaces.IServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Remove<TInterface>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, string? name) -> Solti.Utils.DI.Interfaces.IServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name, System.Type! implementation, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, string? name, System.Type! implementation, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, System.Type! implementation, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service(this Solti.Utils.DI.Interfaces.IServiceCollection! self, System.Type! iface, System.Type! implementation, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service<TInterface, TImplementation>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service<TInterface, TImplementation>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service<TInterface, TImplementation>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, string! name, object! explicitArgs, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceCollectionBasicExtensions.Service<TInterface, TImplementation>(this Solti.Utils.DI.Interfaces.IServiceCollection! self, string! name, Solti.Utils.DI.Interfaces.LifetimeBase! lifetime) -> Solti.Utils.DI.Interfaces.IModifiedServiceCollection!
static Solti.Utils.DI.Interfaces.IServiceProviderBasicExtensions.GetService<TInterface>(this System.IServiceProvider! self) -> TInterface?
static Solti.Utils.DI.Interfaces.ScopeOptions.Default.get -> Solti.Utils.DI.Interfaces.ScopeOptions!
static Solti.Utils.DI.Interfaces.ServiceEntryExtensions.IsFactory(this Solti.Utils.DI.Interfaces.AbstractServiceEntry! self) -> bool
static Solti.Utils.DI.Interfaces.ServiceEntryExtensions.IsInternal(this Solti.Utils.DI.Interfaces.AbstractServiceEntry! self) -> bool
static Solti.Utils.DI.Interfaces.ServiceEntryExtensions.IsService(this Solti.Utils.DI.Interfaces.AbstractServiceEntry! self) -> bool
static Solti.Utils.DI.Interfaces.ServiceOptions.Default.get -> Solti.Utils.DI.Interfaces.ServiceOptions!
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Build(Solti.Utils.DI.Interfaces.IBuildContext! context, System.Collections.Generic.IReadOnlyList<Solti.Utils.DI.Interfaces.IFactoryVisitor!>! visitors) -> void
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.CreateLifetimeManager(System.Linq.Expressions.Expression! getService, System.Linq.Expressions.ParameterExpression! scope, System.Linq.Expressions.ParameterExpression! disposable) -> System.Linq.Expressions.Expression!
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Decorate(System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.DecoratorDelegate!>! decorator) -> void
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Decorators.get -> System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.DecoratorDelegate!>!>!
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Features.get -> Solti.Utils.DI.Interfaces.ServiceEntryFeatures
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Lifetime.get -> Solti.Utils.DI.Interfaces.LifetimeBase?
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.SetValidated() -> void
virtual Solti.Utils.DI.Interfaces.AbstractServiceEntry.Specialize(params System.Type![]! genericArguments) -> Solti.Utils.DI.Interfaces.AbstractServiceEntry!
virtual Solti.Utils.DI.Interfaces.LifetimeBase.CreateFrom(System.Type! iface, string? name, object! value, Solti.Utils.DI.Interfaces.ServiceOptions! serviceOptions) -> System.Collections.Generic.IEnumerable<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>!
virtual Solti.Utils.DI.Interfaces.LifetimeBase.CreateFrom(System.Type! iface, string? name, System.Linq.Expressions.Expression<Solti.Utils.DI.Interfaces.FactoryDelegate!>! factory, Solti.Utils.DI.Interfaces.ServiceOptions! serviceOptions) -> System.Collections.Generic.IEnumerable<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>!
virtual Solti.Utils.DI.Interfaces.LifetimeBase.CreateFrom(System.Type! iface, string? name, System.Type! implementation, object! explicitArgs, Solti.Utils.DI.Interfaces.ServiceOptions! serviceOptions) -> System.Collections.Generic.IEnumerable<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>!
virtual Solti.Utils.DI.Interfaces.LifetimeBase.CreateFrom(System.Type! iface, string? name, System.Type! implementation, Solti.Utils.DI.Interfaces.ServiceOptions! serviceOptions) -> System.Collections.Generic.IEnumerable<Solti.Utils.DI.Interfaces.AbstractServiceEntry!>!
virtual Solti.Utils.DI.Interfaces.LifetimeBase.Using(object! configuration) -> Solti.Utils.DI.Interfaces.LifetimeBase!