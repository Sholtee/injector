class Test
{
    private static readonly System.Reflection.EventInfo FEvent = Events["Event"];
    event Solti.Utils.DI.Proxy.Tests.ProxyGeneratorTests.TestDelegate<System.Int32> Solti.Utils.DI.Proxy.Tests.ProxyGeneratorTests.IFoo<System.Int32>.Event
    {
        add
        {
            System.Object result = Invoke(FEvent.AddMethod, new System.Object[]{value}, FEvent);
            if (result == CALL_TARGET)
                Target.Event += value;
        }

        remove
        {
            System.Object result = Invoke(FEvent.RemoveMethod, new System.Object[]{value}, FEvent);
            if (result == CALL_TARGET)
                Target.Event -= value;
        }
    }
}